/**
 * @fileoverview gRPC-Web generated client stub for shared
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.8
// source: schema.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.shared = require('./schema_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.shared.AppClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.shared.AppPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.shared.Empty,
 *   !proto.shared.GetProblemsResponse>}
 */
const methodDescriptor_App_getProblems = new grpc.web.MethodDescriptor(
  '/shared.App/getProblems',
  grpc.web.MethodType.UNARY,
  proto.shared.Empty,
  proto.shared.GetProblemsResponse,
  /**
   * @param {!proto.shared.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.shared.GetProblemsResponse.deserializeBinary
);


/**
 * @param {!proto.shared.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.shared.GetProblemsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.shared.GetProblemsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.shared.AppClient.prototype.getProblems =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/shared.App/getProblems',
      request,
      metadata || {},
      methodDescriptor_App_getProblems,
      callback);
};


/**
 * @param {!proto.shared.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.shared.GetProblemsResponse>}
 *     Promise that resolves to the response
 */
proto.shared.AppPromiseClient.prototype.getProblems =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/shared.App/getProblems',
      request,
      metadata || {},
      methodDescriptor_App_getProblems);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.shared.UserSubmission,
 *   !proto.shared.SubmitResponse>}
 */
const methodDescriptor_App_submit = new grpc.web.MethodDescriptor(
  '/shared.App/submit',
  grpc.web.MethodType.UNARY,
  proto.shared.UserSubmission,
  proto.shared.SubmitResponse,
  /**
   * @param {!proto.shared.UserSubmission} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.shared.SubmitResponse.deserializeBinary
);


/**
 * @param {!proto.shared.UserSubmission} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.shared.SubmitResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.shared.SubmitResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.shared.AppClient.prototype.submit =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/shared.App/submit',
      request,
      metadata || {},
      methodDescriptor_App_submit,
      callback);
};


/**
 * @param {!proto.shared.UserSubmission} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.shared.SubmitResponse>}
 *     Promise that resolves to the response
 */
proto.shared.AppPromiseClient.prototype.submit =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/shared.App/submit',
      request,
      metadata || {},
      methodDescriptor_App_submit);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.shared.MySubmissionsRequest,
 *   !proto.shared.MySubmissionsResponse>}
 */
const methodDescriptor_App_mySubmissions = new grpc.web.MethodDescriptor(
  '/shared.App/mySubmissions',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.shared.MySubmissionsRequest,
  proto.shared.MySubmissionsResponse,
  /**
   * @param {!proto.shared.MySubmissionsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.shared.MySubmissionsResponse.deserializeBinary
);


/**
 * @param {!proto.shared.MySubmissionsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.shared.MySubmissionsResponse>}
 *     The XHR Node Readable Stream
 */
proto.shared.AppClient.prototype.mySubmissions =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/shared.App/mySubmissions',
      request,
      metadata || {},
      methodDescriptor_App_mySubmissions);
};


/**
 * @param {!proto.shared.MySubmissionsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.shared.MySubmissionsResponse>}
 *     The XHR Node Readable Stream
 */
proto.shared.AppPromiseClient.prototype.mySubmissions =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/shared.App/mySubmissions',
      request,
      metadata || {},
      methodDescriptor_App_mySubmissions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.shared.MyTaskSubmissionsRequest,
 *   !proto.shared.MySubmissionsResponse>}
 */
const methodDescriptor_App_myTaskSubmissions = new grpc.web.MethodDescriptor(
  '/shared.App/myTaskSubmissions',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.shared.MyTaskSubmissionsRequest,
  proto.shared.MySubmissionsResponse,
  /**
   * @param {!proto.shared.MyTaskSubmissionsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.shared.MySubmissionsResponse.deserializeBinary
);


/**
 * @param {!proto.shared.MyTaskSubmissionsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.shared.MySubmissionsResponse>}
 *     The XHR Node Readable Stream
 */
proto.shared.AppClient.prototype.myTaskSubmissions =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/shared.App/myTaskSubmissions',
      request,
      metadata || {},
      methodDescriptor_App_myTaskSubmissions);
};


/**
 * @param {!proto.shared.MyTaskSubmissionsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.shared.MySubmissionsResponse>}
 *     The XHR Node Readable Stream
 */
proto.shared.AppPromiseClient.prototype.myTaskSubmissions =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/shared.App/myTaskSubmissions',
      request,
      metadata || {},
      methodDescriptor_App_myTaskSubmissions);
};


module.exports = proto.shared;

